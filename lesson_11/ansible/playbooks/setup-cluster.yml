---
- name: Configure Percona XtraDB Cluster
  hosts: mysql_cluster
  become: yes
  vars:
    cluster_name: "{{ cluster_name }}"
    sst_user: "{{ sst_user }}"
    sst_password: "{{ sst_password }}"
    
  tasks:
    - name: Wait for MySQL service to be ready
      wait_for:
        port: 3306
        host: "{{ ansible_default_ipv4.address }}"
        delay: 10
        timeout: 300
      
    - name: Get cluster member IPs
      set_fact:
        cluster_addresses: "{{ groups['mysql_cluster'] | map('extract', hostvars, 'internal_ip') | join(',') }}"
      
    - name: Update MySQL configuration with cluster addresses
      lineinfile:
        path: /etc/mysql/percona-xtradb-cluster.conf.d/mysqld.cnf
        regexp: '^wsrep_cluster_address='
        line: "wsrep_cluster_address=gcomm://{{ cluster_addresses }}"
        backup: yes
      notify: restart mysql
      
    - name: Update node address in configuration
      lineinfile:
        path: /etc/mysql/percona-xtradb-cluster.conf.d/mysqld.cnf
        regexp: '^wsrep_node_address='
        line: "wsrep_node_address={{ internal_ip }}"
        backup: yes
      notify: restart mysql
      
    - name: Create cluster bootstrap script
      copy:
        content: |
          #!/bin/bash
          if [ "{{ node_id }}" == "1" ]; then
            echo "Bootstrapping cluster on node 1"
            systemctl stop mysql
            mysqld_safe --wsrep-new-cluster --wsrep-cluster-address=gcomm:// &
            sleep 10
            pkill mysqld
            systemctl start mysql
          else
            echo "Starting node {{ node_id }}"
            systemctl start mysql
          fi
        dest: /usr/local/bin/bootstrap-cluster.sh
        mode: '0755'
        
    - name: Bootstrap cluster on first node
      shell: /usr/local/bin/bootstrap-cluster.sh
      when: node_id == "1"
      
    - name: Start MySQL on other nodes
      systemd:
        name: mysql
        state: started
        enabled: yes
      when: node_id != "1"
      
    - name: Wait for cluster to be ready
      wait_for:
        port: 3306
        host: "{{ ansible_default_ipv4.address }}"
        delay: 5
        timeout: 60
      when: node_id != "1"
      
    - name: Verify cluster status
      shell: mysql -e "SHOW STATUS LIKE 'wsrep_cluster_size';"
      register: cluster_size
      failed_when: false
      
    - name: Display cluster status
      debug:
        msg: "Cluster size: {{ cluster_size.stdout_lines }}"
        
    - name: Create test database and table
      shell: |
        mysql -e "
        CREATE DATABASE IF NOT EXISTS testdb;
        USE testdb;
        CREATE TABLE IF NOT EXISTS test_table (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        INSERT INTO test_table (name) VALUES ('Node {{ node_id }} - Ansible Test Data') ON DUPLICATE KEY UPDATE name=VALUES(name);
        "
      register: db_creation
      failed_when: false

  handlers:
    - name: restart mysql
      systemd:
        name: mysql
        state: restarted
