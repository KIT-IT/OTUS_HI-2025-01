---
- name: Простая настройка Backend серверов с Django
  hosts: backend_servers
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
    django_project_name: "myproject"
    django_app_name: "api"
    django_user: "django"
    django_group: "django"
    django_home: "/opt/django"
    uwsgi_port: 8001
    postgres_db: "appdb"
    postgres_user: "appuser"
    postgres_password: "apppassword"
    database_host: "{{ hostvars['database']['ansible_host'] }}"

  tasks:
    - name: Обновить кэш пакетов
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Установить системные пакеты
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - python3-dev
          - nginx
          - git
          - curl
          - supervisor
        state: present

    - name: Установить Python пакеты через pip
      pip:
        name:
          - uwsgi
          - django
          - djangorestframework
          - django-cors-headers
        state: present

    - name: Создать группу Django
      group:
        name: "{{ django_group }}"
        state: present

    - name: Создать пользователя Django
      user:
        name: "{{ django_user }}"
        group: "{{ django_group }}"
        home: "{{ django_home }}"
        shell: /bin/bash
        create_home: yes

    - name: Создать директории для Django
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ django_user }}"
        group: "{{ django_group }}"
        mode: '0755'
      loop:
        - "{{ django_home }}"
        - "{{ django_home }}/{{ django_project_name }}"
        - "{{ django_home }}/logs"
        - "{{ django_home }}/static"
        - "{{ django_home }}/media"
        - /var/log/uwsgi

    - name: Создать Django проект
      command: django-admin startproject {{ django_project_name }} {{ django_home }}/{{ django_project_name }}
      args:
        creates: "{{ django_home }}/{{ django_project_name }}/manage.py"

    - name: Создать Django приложение
      command: python3 manage.py startapp {{ django_app_name }}
      args:
        chdir: "{{ django_home }}/{{ django_project_name }}"
        creates: "{{ django_home }}/{{ django_project_name }}/{{ django_app_name }}/models.py"

    - name: Настроить права доступа для Django
      file:
        path: "{{ django_home }}"
        owner: "{{ django_user }}"
        group: "{{ django_group }}"
        recurse: yes
        mode: '0755'

    - name: Создать простую конфигурацию Django settings
      copy:
        content: |
          import os
          from pathlib import Path

          BASE_DIR = Path(__file__).resolve().parent.parent
          SECRET_KEY = 'django-insecure-{{ ansible_date_time.epoch }}-{{ inventory_hostname }}'
          DEBUG = True
          ALLOWED_HOSTS = ['*']

          INSTALLED_APPS = [
              'django.contrib.admin',
              'django.contrib.auth',
              'django.contrib.contenttypes',
              'django.contrib.sessions',
              'django.contrib.messages',
              'django.contrib.staticfiles',
              'rest_framework',
              'corsheaders',
              '{{ django_app_name }}',
          ]

          MIDDLEWARE = [
              'corsheaders.middleware.CorsMiddleware',
              'django.middleware.security.SecurityMiddleware',
              'django.contrib.sessions.middleware.SessionMiddleware',
              'django.middleware.common.CommonMiddleware',
              'django.middleware.csrf.CsrfViewMiddleware',
              'django.contrib.auth.middleware.AuthenticationMiddleware',
              'django.contrib.messages.middleware.MessageMiddleware',
              'django.middleware.clickjacking.XFrameOptionsMiddleware',
          ]

          ROOT_URLCONF = '{{ django_project_name }}.urls'

          TEMPLATES = [
              {
                  'BACKEND': 'django.template.backends.django.DjangoTemplates',
                  'DIRS': [],
                  'APP_DIRS': True,
                  'OPTIONS': {
                      'context_processors': [
                          'django.template.context_processors.debug',
                          'django.template.context_processors.request',
                          'django.contrib.auth.context_processors.auth',
                          'django.contrib.messages.context_processors.messages',
                      ],
                  },
              },
          ]

          WSGI_APPLICATION = '{{ django_project_name }}.wsgi.application'

          DATABASES = {
              'default': {
                  'ENGINE': 'django.db.backends.sqlite3',
                  'NAME': BASE_DIR / 'db.sqlite3',
              }
          }

          AUTH_PASSWORD_VALIDATORS = [
              {
                  'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
              },
              {
                  'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
              },
              {
                  'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
              },
              {
                  'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
              },
          ]

          LANGUAGE_CODE = 'en-us'
          TIME_ZONE = 'UTC'
          USE_I18N = True
          USE_TZ = True

          STATIC_URL = '/static/'
          STATIC_ROOT = '{{ django_home }}/static'

          MEDIA_URL = '/media/'
          MEDIA_ROOT = '{{ django_home }}/media'

          DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

          REST_FRAMEWORK = {
              'DEFAULT_PERMISSION_CLASSES': [
                  'rest_framework.permissions.AllowAny',
              ],
              'DEFAULT_RENDERER_CLASSES': [
                  'rest_framework.renderers.JSONRenderer',
              ],
          }

          CORS_ALLOW_ALL_ORIGINS = True
        dest: "{{ django_home }}/{{ django_project_name }}/{{ django_project_name }}/settings.py"
        owner: "{{ django_user }}"
        group: "{{ django_group }}"
        mode: '0644'

    - name: Создать простые views
      copy:
        content: |
          from django.http import JsonResponse
          from django.views.decorators.csrf import csrf_exempt
          from django.utils import timezone
          import json

          def health_check(request):
              return JsonResponse({
                  'status': 'healthy',
                  'timestamp': timezone.now().isoformat(),
                  'server': '{{ inventory_hostname }}',
                  'service': 'Django API Backend'
              })

          def api_info(request):
              return JsonResponse({
                  'name': 'Django REST API',
                  'version': '1.0.0',
                  'description': 'Backend API for {{ django_project_name }}',
                  'endpoints': {
                      'health': '/api/health/',
                      'info': '/api/info/',
                      'items': '/api/items/',
                  },
                  'server': '{{ inventory_hostname }}',
                  'database': 'SQLite'
              })

          @csrf_exempt
          def items_list(request):
              if request.method == 'GET':
                  return JsonResponse({
                      'items': [
                          {'id': 1, 'name': 'Item 1', 'description': 'First item'},
                          {'id': 2, 'name': 'Item 2', 'description': 'Second item'},
                          {'id': 3, 'name': 'Item 3', 'description': 'Third item'},
                      ],
                      'count': 3,
                      'server': '{{ inventory_hostname }}'
                  })
              elif request.method == 'POST':
                  data = json.loads(request.body)
                  return JsonResponse({
                      'message': 'Item created successfully',
                      'data': data,
                      'server': '{{ inventory_hostname }}'
                  })
              else:
                  return JsonResponse({'error': 'Method not allowed'}, status=405)

          @csrf_exempt
          def items_detail(request, item_id):
              return JsonResponse({
                  'id': item_id,
                  'name': f'Item {item_id}',
                  'description': f'Description for item {item_id}',
                  'server': '{{ inventory_hostname }}'
              })
        dest: "{{ django_home }}/{{ django_project_name }}/{{ django_app_name }}/views.py"
        owner: "{{ django_user }}"
        group: "{{ django_group }}"
        mode: '0644'

    - name: Создать URLs
      copy:
        content: |
          from django.contrib import admin
          from django.urls import path
          from {{ django_app_name }} import views

          urlpatterns = [
              path('admin/', admin.site.urls),
              path('api/', views.api_info, name='api_info'),
              path('api/health/', views.health_check, name='health_check'),
              path('api/items/', views.items_list, name='items_list'),
              path('api/items/<int:item_id>/', views.items_detail, name='items_detail'),
          ]
        dest: "{{ django_home }}/{{ django_project_name }}/{{ django_project_name }}/urls.py"
        owner: "{{ django_user }}"
        group: "{{ django_group }}"
        mode: '0644'

    - name: Создать конфигурацию UWSGI
      copy:
        content: |
          [uwsgi]
          module = {{ django_project_name }}.wsgi:application
          pythonpath = {{ django_home }}/{{ django_project_name }}
          chdir = {{ django_home }}/{{ django_project_name }}

          master = true
          processes = 4
          threads = 2
          max-requests = 5000
          vacuum = true
          die-on-term = true

          socket = 127.0.0.1:{{ uwsgi_port }}
          protocol = uwsgi

          logto = {{ django_home }}/logs/uwsgi.log
          log-maxsize = 50000000
          log-backupcount = 5

          uid = {{ django_user }}
          gid = {{ django_group }}

          env = DJANGO_SETTINGS_MODULE={{ django_project_name }}.settings

          buffer-size = 32768
          stats = 127.0.0.1:9191
          stats-http = true
          limit-as = 512
          py-autoreload = 1
          harakiri = 60
          harakiri-verbose = true

          static-map = /static={{ django_home }}/static
          static-map = /media={{ django_home }}/media
        dest: "{{ django_home }}/uwsgi.ini"
        owner: "{{ django_user }}"
        group: "{{ django_group }}"
        mode: '0644'

    - name: Создать systemd сервис для UWSGI
      copy:
        content: |
          [Unit]
          Description=uWSGI Django Application
          After=network.target

          [Service]
          Type=notify
          User={{ django_user }}
          Group={{ django_group }}
          WorkingDirectory={{ django_home }}/{{ django_project_name }}
          Environment=DJANGO_SETTINGS_MODULE={{ django_project_name }}.settings
          ExecStart=/usr/local/bin/uwsgi --ini {{ django_home }}/uwsgi.ini
          ExecReload=/bin/kill -HUP $MAINPID
          Restart=always
          RestartSec=3
          KillSignal=SIGQUIT
          StandardError=syslog
          NotifyAccess=all

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/uwsgi-django.service
        mode: '0644'
      notify: reload systemd

    - name: Создать конфигурацию Nginx для backend
      copy:
        content: |
          server {
              listen 80;
              server_name {{ ansible_default_ipv4.address }} {{ inventory_hostname }};

              client_max_body_size 20M;

              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_proxied any;
              gzip_comp_level 6;
              gzip_types
                  text/plain
                  text/css
                  text/xml
                  text/javascript
                  application/json
                  application/javascript
                  application/xml+rss
                  application/atom+xml
                  image/svg+xml;

              location /static/ {
                  alias {{ django_home }}/static/;
                  expires 30d;
                  add_header Cache-Control "public, immutable";
              }

              location /media/ {
                  alias {{ django_home }}/media/;
                  expires 30d;
                  add_header Cache-Control "public, immutable";
              }

              location /health {
                  access_log off;
                  return 200 "Backend Server: {{ inventory_hostname }}\nStatus: OK\n";
                  add_header Content-Type text/plain;
              }

              location / {
                  include uwsgi_params;
                  uwsgi_pass 127.0.0.1:{{ uwsgi_port }};
                  uwsgi_read_timeout 300;
                  uwsgi_connect_timeout 300;
                  uwsgi_send_timeout 300;
                  
                  add_header Access-Control-Allow-Origin "*" always;
                  add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                  add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
                  
                  if ($request_method = 'OPTIONS') {
                      add_header Access-Control-Allow-Origin "*";
                      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                      add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                      add_header Access-Control-Max-Age 1728000;
                      add_header Content-Type text/plain;
                      add_header Content-Length 0;
                      return 204;
                  }
              }
          }
        dest: /etc/nginx/sites-available/django-backend
        mode: '0644'
      notify: restart nginx

    - name: Активировать сайт Nginx
      file:
        src: /etc/nginx/sites-available/django-backend
        dest: /etc/nginx/sites-enabled/django-backend
        state: link
      notify: restart nginx

    - name: Удалить дефолтный сайт Nginx
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Выполнить миграции Django
      command: python3 manage.py migrate
      args:
        chdir: "{{ django_home }}/{{ django_project_name }}"

    - name: Создать суперпользователя Django
      command: python3 manage.py createsuperuser --noinput --username admin --email admin@example.com
      args:
        chdir: "{{ django_home }}/{{ django_project_name }}"
      environment:
        DJANGO_SUPERUSER_PASSWORD: "admin123"
      ignore_errors: yes

    - name: Собрать статические файлы Django
      command: python3 manage.py collectstatic --noinput
      args:
        chdir: "{{ django_home }}/{{ django_project_name }}"

    - name: Включить и запустить сервисы
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - uwsgi-django
        - nginx

    - name: Проверить статус сервисов
      systemd:
        name: "{{ item }}"
      register: service_status
      loop:
        - uwsgi-django
        - nginx

    - name: Показать статус сервисов
      debug:
        msg: "{{ item.item }} is {{ 'running' if item.status.ActiveState == 'active' else 'not running' }}"
      loop: "{{ service_status.results }}"

    - name: Показать информацию о backend сервере
      debug:
        msg: |
          Backend Server: {{ inventory_hostname }}
          Django Project: {{ django_project_name }}
          UWSGI Port: {{ uwsgi_port }}
          Nginx Port: 80
          API Endpoints:
            - http://{{ ansible_default_ipv4.address }}/api/
            - http://{{ ansible_default_ipv4.address }}/api/health/
            - http://{{ ansible_default_ipv4.address }}/api/items/

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: restart uwsgi
      systemd:
        name: uwsgi-django
        state: restarted
